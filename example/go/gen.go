package main

/*
// Generated by rust2go. Please DO NOT edit this C part manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct StringRef {
  const uint8_t *ptr;
  uintptr_t len;
} StringRef;

typedef struct DemoUserRef {
  struct StringRef name;
  uint8_t age;
} DemoUserRef;

typedef struct WakerRef {
  const void *ptr;
  const void *vtable;
} WakerRef;

typedef struct ListRef {
  const void *ptr;
  uintptr_t len;
} ListRef;

typedef struct DemoComplicatedRequestRef {
  struct ListRef users;
} DemoComplicatedRequestRef;

typedef struct DemoResponseRef {
  bool pass;
} DemoResponseRef;

// hack from: https://stackoverflow.com/a/69904977
__attribute__((weak))
inline void DemoCall_demo_check_cb(const void *f_ptr, struct DemoResponseRef resp, const void *slot) {
    ((void (*)(struct DemoResponseRef, const void*))f_ptr)(resp, slot);
}

// hack from: https://stackoverflow.com/a/69904977
__attribute__((weak))
inline void DemoCall_demo_check_async_cb(const void *f_ptr, struct WakerRef waker, struct DemoResponseRef resp, const void *slot) {
    ((void (*)(struct WakerRef, struct DemoResponseRef, const void*))f_ptr)(waker, resp, slot);
}
*/
import "C"
import (
	"time"
	"unsafe"
)

//export CDemoCall_demo_oneway
func CDemoCall_demo_oneway(_ C.DemoUserRef, ) {
    // user logic
}
//export CDemoCall_demo_check
func CDemoCall_demo_check(_ C.DemoComplicatedRequestRef, slot *C.void, cb *C.void) {
    // user logic
    resp := C.DemoResponseRef{pass: true}
    C.DemoCall_demo_check_cb(unsafe.Pointer(cb), resp, unsafe.Pointer(slot))
}
//export CDemoCall_demo_check_async
func CDemoCall_demo_check_async(w C.WakerRef, _ C.DemoComplicatedRequestRef, slot *C.void, cb *C.void) {
    go func() {
        // user logic
        resp := C.DemoResponseRef{pass: true}
        time.Sleep(time.Duration(3) * time.Second)
        C.DemoCall_demo_check_async_cb(unsafe.Pointer(cb), w, resp, unsafe.Pointer(slot))
    }()
}
func main() {}
